import org.jetbrains.changelog.Changelog

plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'org.jetbrains.changelog' version '2.2.1'
	id "me.modmuss50.mod-publish-plugin" version "0.5.2"
}

version = "${project.mod_version}+${minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

java {
	toolchain {
		languageVersion.set JavaLanguageVersion.of(java_language_version)
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url 'https://jitpack.io' }
	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url "https://cursemaven.com"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}

	maven {
		url "https://maven2.bai.lol"
		content {
			includeGroup "lol.bai"
			includeGroup "mcp.mobius.waila"
		}
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"waila_smallships" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

	modImplementation "curse.maven:small-ships-450659:5566902"


	// compile against the API
	modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${wthit_version}"

	// run against the full jar
	modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${wthit_version}"
	modRuntimeOnly "lol.bai:badpackets:fabric-${badpackets_version}"
	modRuntimeOnly "curse.maven:forge-config-api-port-fabric-547434:5902421"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

changelog {
	version = project.version
	path = file("CHANGELOG.md").canonicalPath
	groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
	lineSeparator = "\n"
}

publishMods {
	file = remapJar.archiveFile
	type = STABLE
	modLoaders.add("fabric")
	changelog = project.changelog.renderItem(project.changelog
			.getLatest()
			.withHeader(false)
			.withEmptySections(false),
			Changelog.OutputType.MARKDOWN
	)

	curseforge {
		projectId = ""
		projectSlug = "waila_smallships" // Required for discord webhook
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(project.minecraft_version)
		javaVersions.add(JavaVersion.VERSION_17)
		clientRequired = true
		serverRequired = true
		requires("fabric-api")
		requires("cloth-config")
		optional("modmenu")
	}

	modrinth {
		projectId = ""
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(project.minecraft_version)
		requires("fabric-api")
		requires("cloth-config")
		requires("cardinal-components-api")
		optional("modmenu")
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}